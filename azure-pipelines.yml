# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
    branches:
        include:
            - '*'
    tags:
        include:
            - '*'

jobs:
    - job: Linux
      pool:
          vmImage: 'ubuntu-16.04'
      steps:
          - script: |
              mkdir $(System.DefaultWorkingDirectory)/bin
              echo 'Hello World!!\n\nver 1.0.0' >> $(System.DefaultWorkingDirectory)/bin/share.txt
              cat $(System.DefaultWorkingDirectory)/bin/share.txt
              cp -r $(System.DefaultWorkingDirectory)/bin $(Build.ArtifactStagingDirectory)

            displayName: 'Create share.txt'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: 'BuildArtifact'
              publishLocation: 'Container'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(Pipeline.Workspace)
              artifactName: 'PipelineArtifact'

    - job: Windows
      pool:
        vmImage: 'windows-latest'

      # variables:
      #   solution: '**/*.sln'
      #   buildPlatform: 'x86|x64|ARM'
      #   buildConfiguration: 'Release'
      #   appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

      steps:

          # - script: |
          #     dir ..\

          #     mkdir "$(System.ArtifactsDirectory)\download"
          #     mkdir "$(Pipeline.Workspace)\download"
          #   displayName: 'Init'  

          # - task: DownloadPipelineArtifact@2
          #   inputs:
          #     source: 'specific'
          #     project: 'gremito.net'
          #     pipeline: 5
          #     runVersion: 'latest'
          #     path: "$(Pipeline.Workspace)/download"

          - script: |
              echo "dir System.DefaultWorkingDirectory"
              dir "$(System.DefaultWorkingDirectory)"

              echo "dir Build.ArtifactStagingDirectory"
              dir "$(Build.ArtifactStagingDirectory)"

              echo "dir Pipeline.Workspace"
              dir "$(Pipeline.Workspace)"
              echo "dir Pipeline.Workspace\s\"
              dir "$(Pipeline.Workspace)\s\"

            displayName: "check download"


          - script: |
              Get-PSDrive.bat

            displayName: "run .bat"

          # - powershell: |
          #     Start-Process Get-PSDrive.bat

          #   displayName: "run .bat"

          # - powershell: |
          #     # BAD
          #     # New-Item scripts
          #     # Copy-Item -LiteralPath .\bat_out.txt -Destination .\scripts
          #     # Copy-Item -Literal .\scripts -Destination $(Build.ArtifactStagingDirectory) -Recurse
          #     # ---
          #     # New-Item "$(Build.ArtifactStagingDirectory)\scripts"
          #     # Copy-Item -LiteralPath ".\bat_out.txt" -Destination "$(Build.ArtifactStagingDirectory)\scripts\"
          #     # Copy-Item ".\bat_out.txt" "$(Build.ArtifactStagingDirectory)\scripts\" -Recurse -Force
          #     # Copy-Item ".\bat_out.txt" "$(Build.ArtifactStagingDirectory)\scripts" -Container
          #     # $backup = "$(Build.ArtifactStagingDirectory)\scripts"
          #     # Copy-Item -Path ".\*.txt" -Destination $backup -Force
          #     # Copy-Item -Literal ".\*" -Destination "$(Build.ArtifactStagingDirectory)\scripts"
          #     # ---

          #     # Good
          #     mkdir "$(Build.ArtifactStagingDirectory)\p-scripts"
          #     cp .\bat_out.txt "$(Build.ArtifactStagingDirectory)\p-scripts"

          #   displayName: "backup"

          # - script: |
          #     # BAD
          #     # Copy-Item -LiteralPath ".\bat_out.txt" -Destination "$(Build.ArtifactStagingDirectory)\scripts\"

          #     # Good
          #     mkdir "$(Build.ArtifactStagingDirectory)\scripts"
          #     cp .\bat_out.txt "$(Build.ArtifactStagingDirectory)\scripts"

          #   displayName: "backup"

          # # - powershell: |
          # #     Set-ExecutionPolicy RemoteSigned
          # #     Get-PSDrive.bat.ps1
          # #     Set-ExecutionPolicy Restricted

          # #   displayName: "run .ps1"

          # # - script: |
          # - powershell: |
          #     echo $(APP_NAME)
          #     echo "Hello $(APP_NAME)!!"

          #   displayName: "test val"

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     pathToPublish: $(Build.ArtifactStagingDirectory)
          #     artifactName: 'backup'
          #     publishLocation: 'Container'
